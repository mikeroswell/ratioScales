[{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mikeroswell.github.io/ratioScales/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mikeroswell.github.io/ratioScales/articles/Ratio_scales_and_centinels.html","id":"hook","dir":"Articles","previous_headings":"","what":"Hook","title":"Ratio scales and centinels","text":"’ve staring NY Times COVID data obsessively, nearly daily, past two years. look (sentinel), even try make decisions basis data, trying understand disease prevalence region evaluate activities seem like reasonable risks. ’ve noticed NYT shows case rates arithmetic scale, think makes work bit harder. exploration alternative scales units (scale unit ideas Jonathan Dushoff, wrote March 2022 understand ), might help make sense data think clearly risks take. First, grab data, freely available github:","code":""},{"path":"https://mikeroswell.github.io/ratioScales/articles/Ratio_scales_and_centinels.html","id":"data-acquisition-crunching","dir":"Articles","previous_headings":"","what":"Data acquisition, crunching","title":"Ratio scales and centinels","text":"first thing ’m going establish reference point . gathered >150 vaccinated people without masks October 2021. right edge seems like ok risk , ’ll set reference point. Just make life easier, ’m going add couple columns rescale average daily case rate per 100,000 residents vis--vis reference date, one arithmetic scale log scale. Also, make life easier ’ll drop states except imediate neighbors Maryland.","code":"vid <- read.csv(\"https://github.com/nytimes/covid-19-data/raw/master/rolling-averages/us-states.csv\")  head(vid) #>         date  geoid      state cases cases_avg cases_avg_per_100k deaths #> 1 2020-01-21 USA-53 Washington     1      0.14                  0      0 #> 2 2020-01-22 USA-53 Washington     0      0.14                  0      0 #> 3 2020-01-23 USA-53 Washington     0      0.14                  0      0 #> 4 2020-01-24 USA-53 Washington     0      0.14                  0      0 #> 5 2020-01-24 USA-17   Illinois     1      0.14                  0      0 #> 6 2020-01-25 USA-53 Washington     0      0.14                  0      0 #>   deaths_avg deaths_avg_per_100k #> 1          0                   0 #> 2          0                   0 #> 3          0                   0 #> 4          0                   0 #> 5          0                   0 #> 6          0                   0 ref_date <- vid %>% filter(date ==\"2021-10-17\") %>%  select(state, ref_case_rate = cases_avg_per_100k)  new_vid<-vid %>% left_join(ref_date, by = \"state\") near_states <-c(\"Maryland\", \"Virginia\", \"Delaware\", \"District of Columbia\", \"West Virginia\", \"Pennsylvania\")  nel_vid<-new_vid %>% mutate(nel_rate = log(cases_avg_per_100k/ref_case_rate)                           , prop_rate = cases_avg_per_100k/ref_case_rate                           , date = as.Date(date)) %>%   filter(state %in% near_states)"},{"path":"https://mikeroswell.github.io/ratioScales/articles/Ratio_scales_and_centinels.html","id":"scales","dir":"Articles","previous_headings":"","what":"Scales","title":"Ratio scales and centinels","text":"’ve grown accustomed staring data arithmetic scale. , “1” represents rate equivalent one date somewhat comfortable >150 maskless, vaccinated people:  Now, “5” means cases 5x high, “0.2” (hard pick ) means cases 1/5 high. first thing jumped , neighboring states, cases now lower reference date! , scale, ’s hard see much. alternative using arithmetic scale use natural logarithmic scale. Whereas graph , 2 represented double reference case rate, natural log scale, 2 means… “2 nels”. really nice thing “nels” symmetrical terms changes case rate: rate doubles, graph goes 0.7 nels, halves, graphs go (0.7 nels). Let’s look graph plotted “nels”:  WOW! see many things graph! first thing jump incredibly good got summer 2021, hard discern graph . Looks like early July last year, cases 3 nels lower even reference, considered relatively good time (though Delta variant pretty horrid , especially parts USA). Another things jumps maybe drop early data. First , ’s lots reasons ignore anyways, since testing infrastructure different , second , make range graph go really low, minus nine “nels.” , nel? ’ve probably guessed, ’s called one Natural Log unit, (one NL; one “nel”). nel big number: 1 nel 2.5 times reference rate, 2 nels 7 times reference rate. drop early data, might see “nel”, like “bel”, might awkwardly sized unit kinds changes ’m interested , ’ll look “centinels” instead. idea changing proportion percent.","code":"nel_vid %>%     ggplot(aes(date, prop_rate))+   geom_point(size = 0.2)+   facet_wrap(~state) +   geom_hline(yintercept = 1, size = 0.1) +   geom_vline(xintercept = as.Date(\"2021-10-17\"), color = \"red\") +   scale_x_date() +   labs(y = \"Cases relative to my reference\", x = \"date\") nel_vid %>%     ggplot(aes(date, nel_rate))+   geom_point(size = 0.2)+   facet_wrap(~state) +   geom_vline(xintercept = as.Date(\"2021-10-17\"), color = \"red\") +   scale_x_date() +   geom_hline(yintercept = 0, size = 0.1) +   labs(x = \"date\", y = \"Cases relative to my reference \\n(nels)\")"},{"path":"https://mikeroswell.github.io/ratioScales/articles/Ratio_scales_and_centinels.html","id":"centinels","dir":"Articles","previous_headings":"","what":"Centinels!!!","title":"Ratio scales and centinels","text":"“Centinels” look like nice units staring , heck 1 centinel? Amazingly, centinel isn’t funky unit. Plus one centinel pretty close 1% increase! let’s take look: like centinels. name fun, helpful thinking compounded changes. balance around reference point. Maybe can use . take practice become fluent interpreting . rely benchmarks: Beyond 1% thing, also know 70 centinels roughly doubling, 140 doubling ~2x, 210 doubling ~3x. get know centinels better, though, need get familiar centinel values “divMult scale:” instead “69.3,” “138.6,” “207.9,” translating, ’ll easier time see “2,” “4,” “8.”","code":"# drop before april 2020 cut_vid <-nel_vid %>% filter(date > as.Date(\"2020-04-01\"))  # we are used to using percents instead of proportions cut_vid %>%     ggplot(aes(date, prop_rate))+   geom_point(size = 0.2)+   facet_wrap(~state) +   geom_hline(yintercept = 1, size = 0.1) +   geom_vline(xintercept = as.Date(\"2021-10-17\"), color = \"red\") +   scale_x_date() +   scale_y_continuous(labels = scales::percent) +   labs(y = \"Cases relative to my reference\", x = \"date\") # now \"centinels\" instead of \"nels\" cut_vid %>%    ggplot(aes(date, nel_rate*100))+   geom_point(size = 0.2)+   facet_wrap(~state) +   geom_vline(xintercept = as.Date(\"2021-10-17\"), color = \"red\") +   scale_x_date() +   geom_hline(yintercept = 0, size = 0.1) +   labs(x = \"date\", y = \"Cases relative to my reference \\n(centinels)\") x <- c(100, 5, pi) # 1% increase y <- x*1.01  z <- x *0.99 w <- x / 1.01 centinel <- function(x, ref){   100*log(x/ref) }  percent <- function(x, ref){   100*(x/ref -1) }   percent(y, x) #> [1] 1 1 1 # it's pretty close centinel(y, x) #> [1] 0.9950331 0.9950331 0.9950331   # compare to decreases percent(z, x) #> [1] -1 -1 -1 # these are all close too percent(w, x) #> [1] -0.990099 -0.990099 -0.990099  centinel(z, x) #> [1] -1.005034 -1.005034 -1.005034 centinel(w, x)   #> [1] -0.9950331 -0.9950331 -0.9950331  # percents go additively, though. So it's hard to think about compounding them # which is what we usually want to do when things change  # if COVID went up by 1% a day for five consecutive days, it would go up by  # about 5 %.  1.01^5 #> [1] 1.05101 # But if it went up by 1% a day for fifty consecutive days 1.01^50 #> [1] 1.644632 # it would go up by more than 60%. This can really trip me up!  # centinels compound much more sensibly  compounded <- function(x, change, times){   x*change^times }  # compound 1% 50 times, you get a 64% increase percent(compounded(x, 1.01, 50), x) #> [1] 64.46318 64.46318 64.46318  # but a 50 centinel increase :-) centinel(compounded(x, 1.01, 50), x) #> [1] 49.75165 49.75165 49.75165  # try going backwards percent(compounded(x, 0.99, 50), x) #> [1] -39.49939 -39.49939 -39.49939 # that's annoying. Only 39% now?!?!   centinel(compounded(x, 0.99, 50), x) #> [1] -50.25168 -50.25168 -50.25168 # still a change of 50 centinels  # and more precisely opposite  centinel(compounded(x, 1/1.01, 50), x) #> [1] -49.75165 -49.75165 -49.75165"},{"path":"https://mikeroswell.github.io/ratioScales/articles/Ratio_scales_and_centinels.html","id":"ratio-scales","dir":"Articles","previous_headings":"Centinels!!!","what":"Ratio scales","title":"Ratio scales and centinels","text":"ratio scale guide, feel can navigate centinels easily… maybe just prefer ratio scale? ratio scale, reference 1 (\\(\\times 1\\) \\(\\div 1\\), either identity). , labels indicate symmetrical geometric changes (e.g., \\(\\times 2, \\div 2; \\times 12, \\div 12\\)). scale preserves symmetry log scales, labels units, operators, make concrete, intuitive sense . learned COVID-19 area? Things got really bad winter, knew… clearer quantitative sense now. Also, already knew, times getting better, now see fast! take NYT daily case rate good prevalence estimate, prevalence COVID-19 now less half mid-October 2021, Delta surge subsiding. Although mask mandates region lifted recently, prevalence continues fall good clip, slight indications lifting mandates slowed subsidance. risk tolerance similar fall, feel pretty good now gathering people vaccinated important :-).","code":"cut_vid %>%    ggplot(aes(date, prop_rate))+   geom_point(size = 0.2)+   facet_wrap(~state) +   geom_vline(xintercept = as.Date(\"2021-10-17\"), color = \"red\") +   scale_x_date() +   scale_y_ratio(    tickVal = \"divMult\"     , slashStar = FALSE     , sec.axis = sec_axis( trans = ~log(.)*100                           , breaks = scales::breaks_extended(n = 6)                           , name = \"centinels\")       ) +    geom_hline(yintercept = 1, size = 0.1) +   labs(x = \"date\", y = \"Cases relative to my reference \\n(divMult scale)\" )"},{"path":[]},{"path":"https://mikeroswell.github.io/ratioScales/articles/centiNels.html","id":"foolish-percent-differences","dir":"Articles","previous_headings":"","what":"Foolish percent differences","title":"centiNels","text":"1 April, 2020, Canadian dollar (CAD) cost 0.703 US dollar (USD). Canadian dollar gained strength pretty steadily next year, 1 July cost 0.736 USD, 1 October, 0.753 USD, 4 January 2021, 0.782 USD, April fools day 2021, 0.796 USD. much exchange rate changing? Often, changes described terms percent difference, even though sort insane. brief peek insanity percentage differences: change exchange rate reflected different percentage changes, depending direction ’re hoping exchange currency. Jonathan traded 100 CAD Michael 70.31 USD 1 April 2020, doubtless ’d feel fool come 1 April, 2021, Michael give \\(70.31/0.782411 = 89.86\\) CAD back. lost just 10% original 100 CAD! Michael, declined trade 2020, accept 2021, feel even foolish? gotten 100 CAD 70.31 USD 2020, now trade cost 78.24 USD. world, Michael paid 11% (almost $8 USD) 2021 year … also bad deal. wait? Surely Michael declining trade must exactly bad Jonathan’s trade good Jonathan? ! Michael given Jonathan 7.93 USD 2021 2020 100 CAD… since ultimately given Jonathan 78.24 USD, loss (2021 dollars) \\(7.93/78.24 = 0.101\\), .e. 10.1% loss Jonathan experienced. Woof. confusing! can make math work … also use better-behaved scale… like natural log scale.","code":"exch %>%    filter(date %in% as.Date(c(\"2020-04-01\"                      , \"2020-07-01\"                      , \"2020-10-01\"                      , \"2021-01-04\"                      , \"2021-04-01\"))) %>%    mutate(pct_diff = round(100*(exRate_scale-1), 2)) %>%    select(date, direction, exRate, pct_diff) %>%    pivot_wider(id_cols = c(\"date\")               , names_from = \"direction\"               , values_from = c(\"exRate\", \"pct_diff\")               , names_vary = \"slowest\"               ) #> # A tibble: 5 × 5 #>   date       exRate_CADtoUSD pct_diff_CADtoUSD exRate_USDtoCAD pct_diff_USDtoCAD #>   <date>               <dbl>             <dbl>           <dbl>             <dbl> #> 1 2020-04-01            1.42              0              0.703              0    #> 2 2020-07-01            1.36             -4.52           0.736              4.74 #> 3 2020-10-01            1.33             -6.56           0.753              7.02 #> 4 2021-01-04            1.28            -10.1            0.782             11.3  #> 5 2021-04-01            1.26            -11.6            0.796             13.2"},{"path":"https://mikeroswell.github.io/ratioScales/articles/centiNels.html","id":"logarithmic-scaling-nels-instead","dir":"Articles","previous_headings":"","what":"Logarithmic scaling: Nels instead","title":"centiNels","text":"Logarithmic transformation excellent solution* problem. makes ratio-based changes linear. * Familiarity comfort logarithms can major drawbacks; refer users “divMult” vignette discussion good workarounds first step making math work rescaling data taking natural logarithm. hardly new idea. One idea explored ratioScales can simply use natural logarithm units measure change. log-transformed, changes exchange rate one direction mirrored changes exchange rate direction exact magnitude. ratioScales plotting retains symmetry, vignette, illustrate simply using “base e” fold change (one “nel”) plotting unit. can sensible alternative common practice , logarithmic transformation, back-transforming data onto original scale plotting. ggplot2 users likely familiar functions scale_*_log10(), . Perhaps now, idiomatic way plot currency data ggplot2 use raw exchange rates (’ll say, scaled starting value can watch relative change), transform y-axis taking base-10 logarithm, mark axes exponentiating back original exchange rate scale. example exchange rates original base-10 logarithmic scales:  difference two graphs pretty subtle. look closely, ’ll see distance 0.85 0.9 substantially greater distance 1.10 1.15 logarithmic y-axis graph (second), whereas, course, distance apart arithmetic y-axis (first graph). gives us feel fact decrease , say, 5% bigger change increase 5%, ’s still hard see consistent two directions exchange (, said one reason prefer log-transformations!). alternative view data logarithmic scale. Lots bases can make sense logarithms (e.g., 2, 10, e); explore natural logarithms (base e = exp(1)). , let’s indulge nomenclature fun, see can us. First, let’s get basic unit … call 1 natural log unit? One Natural Log unit “one nel” (one NL; one “nel”). big one nel? Actually, kind big: fold change 2.5, increase one nel 2.5x. ’s nice solution : use 1/100th Nel unit, one “centiNel.” Just might use percent rather proportional difference, centimeter rather meter, often convenient use centinels track modest changes… actually, just “Bel” hardly used measure differences amplitude (decibels used instead), suspect “centinels” may useful “nels” cases. Furthermore, vignette explore intriguing numerical properties centinel. first, let’s plot centinels!","code":"# first, without logarithmic rescaling exch %>%   ggplot(aes(date, exRate_scale, color = direction)) +   geom_hline(yintercept = 1, width = 0.2 ) +   geom_point() +   geom_point(     data = exch %>%       filter(date %in% as.Date(c(\"2020-04-01\"                                  , \"2020-07-01\"                                  , \"2020-10-01\"                                  , \"2021-01-04\"                                  , \"2021-04-01\")))     , size = 5     , shape = 23     , color = \"black\"     , fill = \"red\") +   scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +   labs(y = \"change in exchange rate\", main = \"orignal scale\")  +   scale_y_continuous(n.breaks = 7) #> Warning: Ignoring unknown parameters: width #> Warning: Removed 46 rows containing missing values (geom_point).  # second, with log10 transformation of y-axis  exch %>%    ggplot(aes(date, exRate_scale, color = direction)) +    geom_hline(yintercept = 1, width = 0.2 ) +   geom_point() +   geom_point(     data = exch %>%        filter(date %in% as.Date(c(\"2020-04-01\"                                  , \"2020-07-01\"                                  , \"2020-10-01\"                                  , \"2021-01-04\"                                  , \"2021-04-01\")))     , size = 5     , shape = 23     , fill = \"red\"     , color = \"black\") +   scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +   labs(y = \"change in exchange rate\", main = \"logarithmic scale\") +   scale_y_log10(n.breaks = 7) #> Warning: Ignoring unknown parameters: width #> Removed 46 rows containing missing values (geom_point). exch %>%    ggplot(aes(date, exRate_scale, color = direction)) +    geom_hline(yintercept = 1, width = 0.2 ) +   geom_point() +   geom_point(     data = exch %>%        filter(date %in% as.Date(c(\"2020-04-01\"                                  , \"2020-07-01\"                                  , \"2020-10-01\"                                  , \"2021-01-04\"                                  , \"2021-04-01\")))     , size = 5     , shape = 23     , fill = \"red\"     , color = \"black\") +   scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +   labs(y = \"difference in exchange rate \\n(centinels)\", main = \"logarithmic scale\") +   scale_y_ratio(tickVal = \"centiNel\") #> Warning: Ignoring unknown parameters: width #> Warning: Removed 46 rows containing missing values (geom_point)."},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mikeroswell.github.io/ratioScales/articles/centiNels.html","id":"the-nel-and-centinel-scales-compared-to-other-divmult-options","dir":"Articles","previous_headings":"","what":"The nel and centinel scales compared to other divmult options","title":"centiNels","text":"“Centinels” look like nice units staring , heck 1 centinel? Amazingly, centinel isn’t funky unit. Plus one centinel pretty close 1% increase! let’s take look:","code":"x <- c(100, 5, pi) # 1% increase y <- x*1.01  z <- x *0.99 w <- x / 1.01 centinel <- function(x, ref){   100*log(x/ref) }  percent <- function(x, ref){   100*(x/ref -1) }   percent(y, x) #> [1] 1 1 1 # it's pretty close centinel(y, x) #> [1] 0.9950331 0.9950331 0.9950331   # compare to decreases percent(z, x) #> [1] -1 -1 -1 # these are all close too percent(w, x) #> [1] -0.990099 -0.990099 -0.990099  centinel(z, x) #> [1] -1.005034 -1.005034 -1.005034 centinel(w, x)   #> [1] -0.9950331 -0.9950331 -0.9950331  # percents go additively, though. So it's hard to think about compounding them # which is what we usually want to do when things change  # if COVID went up by 1% a day for five consecutive days, it would go up by  # about 5 %.  1.01^5 #> [1] 1.05101 # But if it went up by 1% a day for fifty consecutive days 1.01^50 #> [1] 1.644632 # it would go up by more than 60%. This can really trip me up!  # centinels compound much more sensibly  compounded <- function(x, change, times){   x*change^times }  # compound 1% 50 times, you get a 64% increase percent(compounded(x, 1.01, 50), x) #> [1] 64.46318 64.46318 64.46318  # but a 50 centinel increase :-) centinel(compounded(x, 1.01, 50), x) #> [1] 49.75165 49.75165 49.75165  # try going backwards percent(compounded(x, 0.99, 50), x) #> [1] -39.49939 -39.49939 -39.49939 # that's annoying. Only 39% now?!?!   centinel(compounded(x, 0.99, 50), x) #> [1] -50.25168 -50.25168 -50.25168 # still a change of 50 centinels  # and more precisely opposite  centinel(compounded(x, 1/1.01, 50), x) #> [1] -49.75165 -49.75165 -49.75165"},{"path":"https://mikeroswell.github.io/ratioScales/articles/divMult.html","id":"introducing-the-divmult-scale","dir":"Articles","previous_headings":"","what":"Introducing the divMult scale","title":"divMult and percDiff","text":"","code":"# first, without logarithmic rescaling  # second, with log10 transformation of y-axis"},{"path":"https://mikeroswell.github.io/ratioScales/articles/divMult.html","id":"percent-differences-can-work-too-if-an-appropriate-scale-is-used","dir":"Articles","previous_headings":"","what":"Percent differences can work too, if an appropriate scale is used","title":"divMult and percDiff","text":"problem percent differences (typically presented) suggest symmetry confusing ways, make large relative changes near 0 100 seem small. , appropriate (.e., logarithmic) scaling used, familiar percent differences make great axis ticks.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Roswell. Author, maintainer. Jonathan Dushoff. Author. Ben Bolker. Author.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roswell M, Dushoff J, Bolker B (2022). ratioScales: Rational scales visualizing change. R package version 0.0.1.000, https://mikeroswell.github.io/ratioScales/.","code":"@Manual{,   title = {ratioScales: Rational scales for visualizing change},   author = {Michael Roswell and Jonathan Dushoff and Ben Bolker},   year = {2022},   note = {R package version 0.0.1.000},   url = {https://mikeroswell.github.io/ratioScales/}, }"},{"path":"https://mikeroswell.github.io/ratioScales/index.html","id":"ratioscales","dir":"","previous_headings":"","what":"Rational scales for visualizing change","title":"Rational scales for visualizing change","text":"Logarithmic axis scales can clearly communicate multiplicative changes; can also confuse. ratioScales annotates logarithmic axis scales tickmarks denote proportional multiplicative change simply explicitly. main function package, scale_*_ratio(), ggplot-friendly works similarly existingscale_*_* functions ggplot2 scales.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rational scales for visualizing change","text":"can install development version ratioScales GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mikeroswell/ratioScales\")"},{"path":"https://mikeroswell.github.io/ratioScales/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Rational scales for visualizing change","text":"Consider exchange rates US Canadian dollars:  Let’s see, relative baseline (1 April 2020), Canadian dollar gaining losing ground US dollar, much?  strange! Somehow Canadian dollar weakend maximum 15% rebounding, US dollar strengthened much 15%. Maybe best way think ? ratioScales provides “rational” alternatives. example, using “divMult” scale:  Prefer percentage differences? Also ok, use appropriate scale:","code":"exch %>%    ggplot(aes(date, exRate, color = direction)) +    geom_point() +   scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +   labs(y = \"exchange rate\") exch %>%  ggplot(aes(date, exRate_scale, color = direction)) +     geom_hline(yintercept = 1, color = \"black\")+    geom_point() +    scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +    geom_hline(yintercept = 0.85               , color = hcl.colors(4, \"Plasma\")[1], linetype = 3) +    geom_hline(yintercept = 1.15               , color = hcl.colors(4, \"Plasma\")[2], linetype = 5) +   # FUNCTION FROM ggplot2    scale_y_continuous(breaks = seq(80, 130, 5)/100) +    labs(y = \"proportional change in exchange rate\") exch %>%  ggplot(aes(date, exRate_scale, color = direction)) +     geom_hline(yintercept = 1, color = \"black\")+   # times and divided by 1.15; longdash    geom_hline(yintercept = 1/1.15, color = hcl.colors(4, \"Plasma\")[1], linetype = 5) +    geom_hline(yintercept = 1.15, color = hcl.colors(4, \"Plasma\")[2], linetype = 5) +   # times and divided by 0.85; dotted    geom_hline(yintercept = 1/0.85, color = hcl.colors(4, \"Plasma\")[2], linetype = 3) +    geom_hline(yintercept = 0.85, color = hcl.colors(4, \"Plasma\")[1], linetype = 3) +    geom_point() +    scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +   # FUNCTION FROM ratioScales    scale_y_ratio(tickVal = \"divMult\", n = 12, nmin = 12, slashStar = FALSE) +    labs(y = \"multiplicative change in exchange rate\") exch %>%  ggplot(aes(date, exRate_scale, color = direction)) +     geom_hline(yintercept = 1, color = \"black\")+   # times and divided by 1.15; longdash    geom_hline(yintercept = 1/1.15, color = hcl.colors(4, \"Plasma\")[1], linetype = 5) +    geom_hline(yintercept = 1.15, color = hcl.colors(4, \"Plasma\")[2], linetype = 5) +   # times and divided by 0.85; dotted    geom_hline(yintercept = 1/0.85, color = hcl.colors(4, \"Plasma\")[2], linetype = 3) +    geom_hline(yintercept = 0.85, color = hcl.colors(4, \"Plasma\")[1], linetype = 3) +    geom_point() +    scale_color_manual(values = hcl.colors(4, \"Plasma\")[c(1,2)]) +     # FUNCTION FROM ratioScales    scale_y_ratio(tickVal = \"percDiff\") +    labs(y = \"percentage difference in exchange rate\")"},{"path":"https://mikeroswell.github.io/ratioScales/reference/breaks_divMult.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute breaks for ratio scale — breaks_divMult","title":"Compute breaks for ratio scale — breaks_divMult","text":"Compute breaks ratio scale","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/breaks_divMult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute breaks for ratio scale — breaks_divMult","text":"","code":"breaks_divMult(n = 6, nmin = 5, anchor = TRUE, splits = 1, base = exp(1))"},{"path":"https://mikeroswell.github.io/ratioScales/reference/breaks_divMult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute breaks for ratio scale — breaks_divMult","text":"n Scalar, target number breaks nmin Scalar, forced minimum number breaks anchor NULL scalar, value include reference point (usually 1) splits Integer, one c(1,2,3). many tick marks per \"decade?\" base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1).","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/breaks_divMult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute breaks for ratio scale — breaks_divMult","text":"Vector values generate axis breaks","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/breaks_divMult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute breaks for ratio scale — breaks_divMult","text":"","code":"y <- exp(seq(-2,5, length.out = 10)) v <- log(y) # data or data range n <- 5  # axisTicks takes giant steps, returns values way beyond data grDevices::axisTicks(nint = n, log = TRUE, usr = range(v)) #> [1] 1e-02 1e-01 1e+00 1e+01 1e+02 1e+03 1e+04 1e+05 # breaks_divMult gives ~n breaks evenly within the data breaks_divMult(n = n)(v = y) #> [1] 1e-02 1e+00 1e+05  # if 1 is lower limit, only positive log(breaks) breaks_divMult()(c(1, 11)) #> [1]   1 200 # ditto, only negative log(breaks) if 1 is upper limit breaks_divMult()(c(0.04, 1)) #> [1] 1.000 0.001  # expanding range on one side of 1 doesn't leave the other side behind breaks_divMult()(c(0.04, 2.2)) #> [1] 0.001 1.000 6.000 breaks_divMult()(c(0.04, 220)) #> [1] 1e-03 1e+00 1e+05 breaks_divMult()(c(0.04, 2200)) #> [1] 1e-03 1e+00 1e+07  x <- 1:10 dat <- data.frame(x, y) dat %>% ggplot2::ggplot(ggplot2::aes(x, y))+      ggplot2::geom_point()+      ggplot2::geom_hline(yintercept = 1, size = 0.2) +      ggplot2::scale_y_continuous(      trans = \"log\"      , breaks = breaks_divMult()      , labels = label_divMult()      )"},{"path":"https://mikeroswell.github.io/ratioScales/reference/divMult_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural log transformation... providing breaks on the ","title":"Natural log transformation... providing breaks on the ","text":"Natural log transformation... providing breaks \"divMult\" scale","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/divMult_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural log transformation... providing breaks on the ","text":"","code":"divMult_trans(n = 7, base = exp(1), ...)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/divMult_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Natural log transformation... providing breaks on the ","text":"n Scalar, target number breaks base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1). ... Additional arguments passed breaking function, labeller","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/divMult_trans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Natural log transformation... providing breaks on the ","text":"","code":"dat<-data.frame(x = 1:10, y = exp(-2:7)) dat %>% ggplot2::ggplot(ggplot2::aes(x, y)) +   ggplot2::geom_point() +     ggplot2::scale_y_continuous(        trans = \"divMult\"        # default breaks aren't perfect; sometimes adding more helps        #  trans = nel_trans(n = 9)        , labels = label_divMult()        , sec.axis = ggplot2::sec_axis(            labels = function(x) {x}            , trans = ~.            , breaks = c(0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000)            , name = \"original scale\"          )        ) +      ggplot2::labs(y = \"nel (natural log) scale\") +      ggplot2::geom_hline(yintercept = 1, size = 0.2)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/exch.html","id":null,"dir":"Reference","previous_headings":"","what":"USD-CAD exchange rate in first two COVID pandemic years — exch","title":"USD-CAD exchange rate in first two COVID pandemic years — exch","text":"dataset weekday average exchange rate Canadian US Dollars 1 April 2020 31 March 2022.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/exch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"USD-CAD exchange rate in first two COVID pandemic years — exch","text":"","code":"exch"},{"path":"https://mikeroswell.github.io/ratioScales/reference/exch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"USD-CAD exchange rate in first two COVID pandemic years — exch","text":"Data frame 1044 observations 4 variables date Date, \"YYYY-MM-DD\" direction Character, direction exchange rate exRate* Numeric, exchange rate exRate_scale Numeric, proportional difference exchnage rate 2020-04-01","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/exch.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"USD-CAD exchange rate in first two COVID pandemic years — exch","text":"Data Federal Reserve Economic Data (FRED), accessed R package alfred.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_centiNel.html","id":null,"dir":"Reference","previous_headings":"","what":"100x Natural log (centinel) transformation of breaks — label_centiNel","title":"100x Natural log (centinel) transformation of breaks — label_centiNel","text":"100x Natural log (centinel) transformation breaks","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_centiNel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"100x Natural log (centinel) transformation of breaks — label_centiNel","text":"","code":"label_centiNel()"},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_centiNel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"100x Natural log (centinel) transformation of breaks — label_centiNel","text":"Function used argument labels scale_*_*","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_divMult.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio labels — label_divMult","title":"Ratio labels — label_divMult","text":"Ratio labels","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_divMult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio labels — label_divMult","text":"","code":"label_divMult(logscale = FALSE, base = exp(1), slashStar = TRUE)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_divMult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio labels — label_divMult","text":"logscale Logical, breaks already log scale? base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1). slashStar Logical, division mulitplication symbols \"*\" \"/\" (default). Prettier symbols \\(\\times, \\div\\) available slashStar == FALSE, font libraries text size may make distinguishing \\(\\div\\) \\(+\\) difficult.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_divMult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio labels — label_divMult","text":"Function generating labeling expressions based breaks","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_divMult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio labels — label_divMult","text":"","code":"label_divMult()(c(1:4,2)) #> [1] \"1\"    \" * 2\" \" * 3\" \" * 4\" \" * 2\""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_nel.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural log (nel) transformation of breaks — label_nel","title":"Natural log (nel) transformation of breaks — label_nel","text":"Natural log (nel) transformation breaks","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_nel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural log (nel) transformation of breaks — label_nel","text":"","code":"label_nel()"},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_nel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Natural log (nel) transformation of breaks — label_nel","text":"Function used argument labels scale_*_*","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_percDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale breakpoints based on percentage difference from reference — label_percDiff","title":"Scale breakpoints based on percentage difference from reference — label_percDiff","text":"Scale breakpoints based percentage difference reference","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_percDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale breakpoints based on percentage difference from reference — label_percDiff","text":"","code":"label_percDiff(logscale = FALSE, base = 10)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_percDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale breakpoints based on percentage difference from reference — label_percDiff","text":"logscale Logical, breaks already log scale? base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1).","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_percDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale breakpoints based on percentage difference from reference — label_percDiff","text":"Function used argument labels scale_*_*","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_propDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale breakpoints based on percentage difference from reference — label_propDiff","title":"Scale breakpoints based on percentage difference from reference — label_propDiff","text":"Scale breakpoints based percentage difference reference","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_propDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale breakpoints based on percentage difference from reference — label_propDiff","text":"","code":"label_propDiff(logscale = FALSE, base = 10, accuracy = 0.01)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_propDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale breakpoints based on percentage difference from reference — label_propDiff","text":"logscale Logical, breaks already log scale? base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1). accuracy Numeric scalar, determines rounding precision","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/label_propDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale breakpoints based on percentage difference from reference — label_propDiff","text":"Function used argument labels scale_*_*","code":""},{"path":[]},{"path":"https://mikeroswell.github.io/ratioScales/reference/limit_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate log-scaled axis breaks to data range — limit_breaks","title":"Truncate log-scaled axis breaks to data range — limit_breaks","text":"Truncate log-scaled axis breaks data range","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/limit_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate log-scaled axis breaks to data range — limit_breaks","text":"","code":"limit_breaks(v, n = 5, splits = 1, base = exp(1))"},{"path":"https://mikeroswell.github.io/ratioScales/reference/limit_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate log-scaled axis breaks to data range — limit_breaks","text":"v Numeric vector, data data range n Scalar, target number breaks splits Integer, one c(1,2,3). many tick marks per \"decade?\" base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1).","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/limit_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate log-scaled axis breaks to data range — limit_breaks","text":"Vector numeric values axis breaks","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/limit_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate log-scaled axis breaks to data range — limit_breaks","text":"","code":"dat <- exp(seq(-2,5,0.2)) v <- log(dat) # data or data range n <- 5 # axisTicks returns values way beyond data grDevices::axisTicks(nint = n, log = TRUE, usr = range(v)) #> [1] 1e-02 1e-01 1e+00 1e+01 1e+02 1e+03 1e+04 1e+05 # limit_breaks reels this in limit_breaks(v = v, n = n) #> [1] 1e-02 1e+05"},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural log transformation... providing breaks on the ","title":"Natural log transformation... providing breaks on the ","text":"Natural log transformation... providing breaks \"nel\" scale","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural log transformation... providing breaks on the ","text":"","code":"nel_trans(n = 7, base = exp(1), use_centiNel = FALSE, ...)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Natural log transformation... providing breaks on the ","text":"n Scalar, target number breaks base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1). use_centiNel Logical, units \"centiNels\" (default \"nel\") ... Additional arguments passed breaking function, labeller","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_trans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Natural log transformation... providing breaks on the ","text":"","code":"dat<-data.frame(x = 1:10, y = exp(-2:7)) dat %>% ggplot2::ggplot(ggplot2::aes(x, y)) +   ggplot2::geom_point() +     ggplot2::scale_y_continuous(        trans = \"nel\"       , sec.axis = ggplot2::sec_axis(            labels = function(x) {x}            , trans = ~.            , breaks = c(0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000)            , name = \"original scale\"          )        ) +      ggplot2::labs(y = \"nel (natural log) scale\") +      ggplot2::geom_hline(yintercept = 1, size = 0.2)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_vid.html","id":null,"dir":"Reference","previous_headings":"","what":"NY Times COVID case data for mid-Atlantic USA in first two pandemic years — nel_vid","title":"NY Times COVID case data for mid-Atlantic USA in first two pandemic years — nel_vid","text":"dataset containing COVID cases deaths 6 US states territories 1 April 2020 31 March 2022.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_vid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NY Times COVID case data for mid-Atlantic USA in first two pandemic years — nel_vid","text":"","code":"nel_vid"},{"path":"https://mikeroswell.github.io/ratioScales/reference/nel_vid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NY Times COVID case data for mid-Atlantic USA in first two pandemic years — nel_vid","text":"Data frame 4368 observations 11 variables: date Date, YYYY-MM-DD state Character, name US state territory cases Integer, reported daily COVID cases cases_avg Numeric, rolling daily average number cases within \"state\" previous 2 weeks cases_avg_per_100k Numeric, rolling daily average case rate per 100k residents previous 2 weeks deaths Integer, reported daily COVID-related deaths deaths_avg Numeric, rolling daily average number deaths within \"state\" previous 2-weeks deaths_avg_per_100k Numeric, rolling daily average death rate per 100k residents previous 2 weeks ref_case_rate Numeric, rolling daily average case rate per 100k residents reference 2-week time period nel_rate Numeric, case rate rescaled reference expressed \"nels\" prop_rate Numeric, case rate rescaled reference expressed proprtion reference rate @source  Data New York Times, based reports state local health agencies. https://github.com/nytimes/covid-19-data","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mikeroswell.github.io/ratioScales/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/propDiff_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Natural log transformation... showing proportional change explicitly — propDiff_trans","title":"Natural log transformation... showing proportional change explicitly — propDiff_trans","text":"Natural log transformation... showing proportional change explicitly","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/propDiff_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Natural log transformation... showing proportional change explicitly — propDiff_trans","text":"","code":"propDiff_trans(n = 7, base = exp(1), ...)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/propDiff_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Natural log transformation... showing proportional change explicitly — propDiff_trans","text":"n Scalar, target number breaks base positive complex number: base respect     logarithms computed.  Defaults \\(e\\)=exp(1). ... additional arguments passed label_propDiff","code":""},{"path":[]},{"path":"https://mikeroswell.github.io/ratioScales/reference/propDiff_trans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Natural log transformation... showing proportional change explicitly — propDiff_trans","text":"","code":"dat<-data.frame(x = 1:10, y = exp(-2:7)) dat %>% ggplot2::ggplot(ggplot2::aes(x, y)) +     ggplot2::geom_point() +     ggplot2::scale_y_continuous(       trans = propDiff_trans()       , sec.axis = ggplot2::sec_axis(           labels = function(x) {x}           , trans = ~.           , breaks = c(0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000)           , name = \"original scale\"         )       ) +     ggplot2::labs(y = \"propDiff scale\") +     ggplot2::geom_hline(yintercept = 1, size = 0.2)   dat %>% ggplot2::ggplot(ggplot2::aes(x, exp(seq(-1, 0.8, 0.2)))) +  ggplot2::geom_point() +  ggplot2::scale_y_continuous(    trans = propDiff_trans()    , sec.axis = ggplot2::sec_axis(      labels = function(x) {x}      , trans = ~.      , breaks = c(0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2)      , name = \"original scale\"    )  ) +  ggplot2::labs(y = \"propDiff scale\") +  ggplot2::geom_hline(yintercept = 1, size = 0.2)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/scale_y_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","title":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","text":"scale_x_ratio scale_y_ratio alternatives  traditional scale_*_continuous scales continuous x y aesthetics, explicitly highlight multiplicative geometric value changes. Rather traditional log transformations (scale_*_log10()), rescale axis return tickmarks original scale data, scale_*_ratio axis tick values represent multiplicative change reference point. scales may especially useful highlighting proportional changes.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/scale_y_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","text":"","code":"scale_y_ratio(tickVal = \"divMult\", splits = 2, ...)"},{"path":"https://mikeroswell.github.io/ratioScales/reference/scale_y_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","text":"tickVal Character, one \"divMult\", \"propDiff\", \"percDiff\", \"nel\", \"centiNel\" splits Integer, one c(1,2,3). many tick marks per \"decade?\" ... Additional arguments passed scale_y_continuous","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/scale_y_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","text":"Logarithmic transformations make multiplicative changes additive, often used highlight relative change. traditional rescale axis logarithmically mark ticks original scale values (e.g. scale_y_log10)). scale_*_ratio provides alternative, marking ticks transformed values. may especially useful comparing relative changes quantities different units. Five ratio scales provided (denoted tickVal argument): divMult rescales axis logarithmically, prints multiplicative changes axis ticks, explicitly noting operator ( \\(\\times\\) \\(\\div\\)). scale highlights symmetry division multiplication (\\(\\times 2\\) equally far \\(\\) \\(  \\div 2\\)). nel rescales axis logarithmically, marks units \"nels\" (_N_atural _L_ogarithm). centiNel rescales axis logarithmically, marks units \"centinels,\" .e. one hundredth \"nel\". may appropriate small changes (.e. hundred percents) -propDiff rescales axis logarithmically, marks axes terms proportional  difference reference point. Unlike proportions plotted arithmetic scale, propDiff transformation reveals underlying geometric symmetry: (\\(\\times 2\\) equally far \\(\\) \\(\\div 2\\)) graphically, tick values indicate familiar proportional changes \\(+ 1\\), \\(-0.5\\). -percDiff rescales axis logarithmically, marks axes terms percentage difference reference point. Unlike percentages plotted arithmetic scale, percDiff transformation reveals underlying geometric symmetry: (\\(\\times 1.25\\) equally far \\(\\) \\(\\div 1.25\\)) graphically, tick values indicate familiar proportional changes \\(+ 25\\%\\), \\(- 20\\%\\). small changes, \"centinels\" percentage difference may preferable, larger changes, \"nels\" (possibly proportional difference) may preferable. Typically, data passed scale_*_ratio centered reference value advance.","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/scale_y_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio-based position scales for continuous data (x & y) — scale_y_ratio","text":"","code":"smaller <- data.frame(x = 1:10, y = exp(seq(-0.2, 0.7, 0.1))) bigger <- data.frame(x = 1:10, y = exp(-2:7)) ax2 <- ggplot2::sec_axis(           labels = function(x) {x}           , trans = ~.           , breaks = breaks_divMult(n = 7, splits = 2)           , name = \"original scale\"         )  bigger %>%  ggplot2::ggplot(ggplot2::aes(x,y)) +      ggplot2::geom_point() +      ggplot2::geom_hline(yintercept = 1, size = 0.2) +      scale_y_ratio(tickVal = \"divMult\"      , slashStar = TRUE      , sec.axis = ax2) +         ggplot2::labs(y = \"divMult scale (fold change)\")   smaller %>%  ggplot2::ggplot(ggplot2::aes(x,y)) +      ggplot2::geom_point() +      scale_y_ratio(tickVal = \"centiNel\"      , sec.axis = ax2      ) +         ggplot2::labs(y = \"centiNels\")   # propDiff is a little strange bigger %>%  ggplot2::ggplot(ggplot2::aes(x,y)) +      ggplot2::geom_point() +      scale_y_ratio(tickVal = \"propDiff\"      , sec.axis = ax2         ) +         ggplot2::labs(y = \"propDiff (proportional difference) scale\")   # percDiff should be familiar smaller %>%  ggplot2::ggplot(ggplot2::aes(x,y)) +      ggplot2::geom_point() +      scale_y_ratio(tickVal = \"percDiff\"      , sec.axis = ax2) +         ggplot2::labs(y = \"propDiff (perentage difference) scale\")"},{"path":"https://mikeroswell.github.io/ratioScales/reference/split_decades.html","id":null,"dir":"Reference","previous_headings":"","what":"Split stingy limit_breaks into three parts per complete decade — split_decades","title":"Split stingy limit_breaks into three parts per complete decade — split_decades","text":"Split stingy limit_breaks three parts per complete decade","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/split_decades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split stingy limit_breaks into three parts per complete decade — split_decades","text":"","code":"split_decades(v, splits = c(1, 2, 3))"},{"path":"https://mikeroswell.github.io/ratioScales/reference/split_decades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split stingy limit_breaks into three parts per complete decade — split_decades","text":"v Vector unlogged scale examined split splits Integer, one c(1,2,3). many tick marks per \"decade?\"","code":""},{"path":"https://mikeroswell.github.io/ratioScales/reference/split_decades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split stingy limit_breaks into three parts per complete decade — split_decades","text":"Vector splits added","code":""}]
